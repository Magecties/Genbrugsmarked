@page "/postpage"
@inject HttpClient Http;
@using Core;
@inject NavigationManager NavManager


<h1 class="mb-3 mt-3">Shopping List</h1>
<table class="table table-striped">
    <thead>
        <tr>
            <th>Name</th>
            <th>Amount</th>
            <th>Price</th>
            <th>Shop</th>
            <th>Done</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in shoppingList?? new Post[0])
        {
            <tr>
                <td>@item.Name</td>
                <td>@item.Amount</td>
                <td>@item.Price</td>
                <td>@item.Shop</td>
                <td>
                    <InputCheckbox id="Done" @bind-Value="item.Done" @onclick="() =>UpdateShoppingItem(item) " class="form-check-input" />
                </td>
                <td>
                    <button class="btn-danger" style="color:red; background-size:auto" @onclick="() => DeleteShoppingItem(item)"></button>
                </td>
                
            </tr>
        }
        
    </tbody>
</table>

<button class="btn btn-primary" @onclick="() => addDialog.Open()">Add Item</button>

<img src="busy.gif" style="display:@busyDisplayStyle" />

<div>
    <strong>Total Price: </strong>@CalculateTotalPrice().ToString("0.00")
</div>

<ModalDialog @ref="@addDialog" Title="Add Item to shoppinglist">

    <EditForm EditContext="@aEditContext" class="row p-3" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="col-md-12 mb-3">
            <label for="Name">Name</label>
            <InputText id="Name" @bind-Value="shoppingItem.Name" class="form-control" />
        </div>
        <div class="col-md-6 mb-3">
            <label for="Price">Price</label>
            <InputNumber id="Price" @bind-Value="shoppingItem.Price" class="form-control" />
        </div>
        <div class="col-md-6 mb-3">
            <label for="Amount">Amount</label>
            <InputNumber id="Amount" @bind-Value="shoppingItem.Amount" class="form-control" />
        </div>
        
        <div class="col-md-12 mb-3">
            <label for="Description">Description</label>
            <InputTextArea id="Description" @bind-Value="shoppingItem.Description" class="form-control" />
        </div>
    <div class="col-md-12 mb-3">
        <label for="Description">Shop</label>
        <InputTextArea id="Shop" @bind-Value="shoppingItem.Shop" class="form-control" />
    </div>
        <div class="col-md-6 mb-3">
            <div class="form-check">
                <InputCheckbox id="Done" @bind-Value="shoppingItem.Done" class="form-check-input" />
                <label class="form-check-label" for="Done">
                    Is Done
                </label>
            </div>
        </div>

        <div class="col-12 mb-3">
            <button type="submit" class="btn btn-primary">Add</button>
        </div>
    </EditForm>

</ModalDialog>

@code {

    private decimal CalculateTotalPrice()
    {
        decimal totalPrice = 0;
        foreach (var item in shoppingList)
        {
            totalPrice += item.Price * item.Amount;
        }
        return totalPrice;
    }


    // Style for billede der vises når data hentes. Se
    // OnInitializedAsync().
    private string busyDisplayStyle = "none";

    // Objekt for formen der vises modal
    private Post shoppingItem = new Post();

    // container for listen
    private ShoppingItem[]? shoppingList = new ShoppingItem[0];

    // kontekst for formen
    private EditContext? aEditContext;

    // adresse på server
    private string serverUrl = "https://localhost:7010";

    protected override void OnInitialized()
    {
        aEditContext = new EditContext(Post);
    }

    public async Task HandleValidSubmit()
    {
        await AddShoppingItem();
        addDialog.Close();
    }

    private async Task AddShoppingItem()
    {
        await Http.PostAsJsonAsync<ShoppingItem>($"{serverUrl}/api/shopping/add", shoppingItem);
        Console.WriteLine("Klient: add " + shoppingItem.Name + " " + shoppingItem.Price);
        shoppingList = await Http.GetFromJsonAsync<ShoppingItem[]>($"{serverUrl}/api/shopping/getall");
        shoppingItem = new(); // clear fields in form
    }

    public string boolAsText(bool b)
    {
        return b ? "YES" : "NO";
    }

    protected override async Task OnInitializedAsync()
    {
        busyDisplayStyle = "block"; // tænd busy
        shoppingList = await Http.GetFromJsonAsync<ShoppingItem[]>($"{serverUrl}/api/shopping/getall");
        busyDisplayStyle = "none"; // sluk busy
    }

    private async Task DeleteShoppingItem(ShoppingItem item)
    {
        await Http.DeleteAsync($"{serverUrl}/api/shopping/delete/{item.Id}");

        shoppingList = await Http.GetFromJsonAsync<ShoppingItem[]>($"{serverUrl}/api/shopping/getall");

    }

    private async Task UpdateShoppingItem(ShoppingItem item)
    {
        item.Done = !item.Done;
        await Http.PutAsJsonAsync<ShoppingItem>($"{serverUrl}/api/shopping/update", item);
    }

    private ModalDialog? addDialog { get; set; }
}

