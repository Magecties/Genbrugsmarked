@page "/orderpage"
@inject HttpClient Http
@using Core
@inject NavigationManager NavManager

<h3>Order Page</h3>

<h1 class="mb-3 mt-3">Shopping List</h1>
<table class="table table-striped">
    <thead>
        <tr>
            <th>Name</th>
            <th>Amount</th>
            <th>Price</th>
            <th>Shop</th>
            <th>Done</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Orders ?? new Order[0])
        {
            <tr>
                <td>@item.User</td>
                <td>@item.OrderId</td>
                <td>
                    @if (item.Posts != null)
                    {
                        @item
                    }
                    else
                    {
                        <span>N/A</span>
                    }
                </td>
                <!-- Add other columns here as needed -->
            </tr>
        }
    </tbody>
</table>

@code {
    private string busyDisplayStyle = "none";
    private Order[] Orders = new Order[0];
    private string serverUrl = "https://localhost:7235";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            busyDisplayStyle = "block";
            Orders = await Http.GetFromJsonAsync<Order[]>($"{serverUrl}/api/orders/getall");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching orders: {ex.Message}");
        }
        finally
        {
            busyDisplayStyle = "none";
        }
    }

    private async Task DeleteOrderItem(Order item)
    {
        await Http.DeleteAsync($"{serverUrl}/api/orders/delete/{item.Id}");
        Orders = await Http.GetFromJsonAsync<Order[]>($"{serverUrl}/api/orders/getall");
    }

    private async Task UpdateOrderItem(Order item)
    {
        // Update the order item
        await Http.PutAsJsonAsync<Order>($"{serverUrl}/api/orders/update", item);
    }
}
